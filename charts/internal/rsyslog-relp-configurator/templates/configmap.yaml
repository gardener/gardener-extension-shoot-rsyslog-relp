# SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and Gardener contributors
#
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "name" . }}-config
  namespace: {{ .Release.Namespace }}
data:
  rsyslog-configurator.service: |
    [Unit]
    Description=rsyslog configurator daemon
    Documentation=https://github.com/gardener/gardener-extension-shoot-rsyslog-relp
    [Service]
    Type=simple
    Restart=always
    RestartSec=15
    ExecStart=/var/lib/rsyslog-relp-configurator/configure-rsyslog.sh
    [Install]
    WantedBy=multi-user.target

  configure-rsyslog.sh: |
    #!/bin/bash

    function configure_auditd() {
      if [[ ! -d /etc/audit/rules.d.original ]] && [[ -d /etc/audit/rules.d ]]; then
        mv /etc/audit/rules.d /etc/audit/rules.d.original
      fi

      if [[ ! -d /etc/audit/rules.d ]]; then
        mkdir -p /etc/audit/rules.d
      fi
      if ! diff -rq /var/lib/rsyslog-relp-configurator/audit/rules.d /etc/audit/rules.d ; then
        rm -rf /etc/audit/rules.d/*
        cp -L /var/lib/rsyslog-relp-configurator/audit/rules.d/* /etc/audit/rules.d/
        if [[ -f /etc/audit/plugins.d/syslog.conf ]]; then
          sed -i 's/no/yes/g' /etc/audit/plugins.d/syslog.conf
        fi
        augenrules --load
        systemctl restart auditd
      fi
    }

    function configure_rsyslog() {
      if [[ ! -f /etc/rsyslog.d/60-audit.conf ]] || ! diff -rq /var/lib/rsyslog-relp-configurator/rsyslog.d/60-audit.conf /etc/rsyslog.d/60-audit.conf ; then
        cp -fL /var/lib/rsyslog-relp-configurator/rsyslog.d/60-audit.conf /etc/rsyslog.d/60-audit.conf
        systemctl restart rsyslog
      elif ! systemctl is-active --quiet rsyslog.service ; then
        # Ensure that the rsyslog service is running.
        systemctl start rsyslog.service
      fi
    }

    if systemctl list-unit-files auditd.service > /dev/null; then
      echo "Configuring auditd.service ..."
      configure_auditd
    else
      echo "auditd.service is not installed, skipping configuration"
    fi

    # Make sure that the syslog.service symlink which points to the rsyslog.service unit is created before attempting
    # to configure rsyslog to ensure proper startup of the rsyslog.service.
    # TODO(plkokanov): due to an issue on gardenlinux, syslog.service is missing: https://github.com/gardenlinux/gardenlinux/issues/1864.
    # This means that for gardenlinux we have to skip the check if syslog.service exists for now.
    # As rsyslog.service comes preinstalled on gardenlinux, this should not lead to configuration problems.
    if grep -q gardenlinux /etc/os-release || \
      systemctl list-unit-files syslog.service > /dev/null && \
      systemctl list-unit-files rsyslog.service > /dev/null; then
      echo "Configuring rsyslog.service ..."
      configure_rsyslog
    else
      echo "rsyslog.service and syslog.service are not installed, skipping configuration"
    fi

  process_rsyslog_pstats.sh: |
    #!/bin/bash

    set -e

    output_dir="/tmp"

    while [[ $# -gt 0 ]]; do
      case "$1" in
        -o|--output_dir)
          shift; output_dir="${1:-$output_dir}"
          ;;
        *)
          echo "Unknown argument: $1"
          exit 1
          ;;
      esac
      shift
    done

    process_json() {
      local json=$1

      echo $json | \
        jq -r '
          ([to_entries[] | select(.value|type=="string") | "\(.key)=\"\(.value)\""] | join(",")) as $labels
          | to_entries[] | select(.value|type=="number")
          | "rsyslog_pstat_\(.key | sub("\\.";"_")){\($labels)} \(.value)"
        ' || { logger -p error -t  process_rsyslog_pstats.sh  "Error processing JSON: $json"; exit 1; }
    }

    process_line() {
      local line=$1
      local json

      json=$(echo $line | sed -n 's/.*rsyslogd-pstats: //p') || { logger -p error -t  process_rsyslog_pstats.sh  "Error extracting JSON from line: $line"; return 1; }
      process_json "$json"
    }

    add_comments() {
      local prefix=$1
      local help_and_type=()

      case $prefix in
        *"rsyslog_pstat_submitted")
          help_and_type=('Number of messages submitted' 'counter')
          ;;
        *"processed")
          help_and_type=('Number of messages processed' 'counter')
          ;;
        *"rsyslog_pstat_failed")
          help_and_type=('Number of messages failed' 'counter')
          ;;
        *"rsyslog_pstat_suspended")
          help_and_type=('Number of times suspended' 'counter')
          ;;
        *"rsyslog_pstat_suspended_duration")
          help_and_type=('Time spent suspended' 'counter')
          ;;
        *"rsyslog_pstat_resumed")
          help_and_type=('Number of times resumed' 'counter')
          ;;
        *"rsyslog_pstat_utime")
          help_and_type=('User time used in microseconds' 'counter')
          ;;
        *"rsyslog_pstat_stime")
          help_and_type=('System time used in microsends' 'counter')
          ;;
        *"rsyslog_pstat_maxrss")
          help_and_type=('Maximum resident set size' 'gauge')
          ;;
        *"rsyslog_pstat_minflt")
          help_and_type=('Total minor faults' 'counter')
          ;;
        *"rsyslog_pstat_majflt")
          help_and_type=('Total major faults' 'counter')
          ;;
        *"rsyslog_pstat_inblock")
          help_and_type=('Filesystem input operations' 'counter')
          ;;
        *"rsyslog_pstat_oublock")
          help_and_type=('Filesystem output operations' 'counter')
          ;;
        *"rsyslog_pstat_nvcsw")
          help_and_type=('Voluntary context switches' 'counter')
          ;;
        *"rsyslog_pstat_nivcsw")
          help_and_type=('Involuntary context switches' 'counter')
          ;;
        *"rsyslog_pstat_openfiles")
          help_and_type=('Number of open files' 'counter')
          ;;
        *"rsyslog_pstat_size")
          help_and_type=('Messages currently in queue' 'gauge')
          ;;
        *"rsyslog_pstat_enqueued")
          help_and_type=('Total messages enqueued' 'counter')
          ;;
        *"rsyslog_pstat_full")
          help_and_type=('Times queue was full' 'counter')
          ;;
        *"rsyslog_pstat_discarded_full")
          help_and_type=('Messages discarded due to queue being full' 'counter')
          ;;
        *"rsyslog_pstat_discarded_nf")
          help_and_type=('Messages discarded when queue not full' 'counter')
          ;;
        *"rsyslog_pstat_maxqsize")
          help_and_type=('Maximum size queue has reached' 'gauge')
          ;;
      esac

      if [ ${#help_and_type[@]} -eq 0 ]; then
        return 0
      fi

      comments+="# HELP ${prefix} ${help_and_type[0]}.\n"
      comments+="# TYPE ${prefix} ${help_and_type[1]}"
      echo "$comments"
    }

    # Create output directory if it does not exist.
    mkdir -p "$output_dir"

    declare -a lines
    output_file="$output_dir/rsyslog_pstats.prom"
    output=""
    prev_prefix=""

    while IFS= read -r line; do
      if [[ $line == *"rsyslogd-pstats: BEGIN"* ]]; then
        # Start of a new batch, clear the lines array and the output string.
        lines=()
        output=""
        prev_prefix=""
      elif [[ $line == *"rsyslogd-pstats: END"* ]]; then
        # End of a batch, sort the lines array, aggregate the output and write it to a file.
        IFS=$'\n' lines=($(sort <<<"${lines[*]}"))
        for line in "${lines[@]}"; do
          prefix=$(echo "$line" | cut -d'{' -f1) || { logger -p error -t  process_rsyslog_pstats.sh  "Error extracting prefix from line: $line"; exit 1; }
          if [[ "$prefix" != "$prev_prefix" ]]; then
            comment="$(add_comments "$prefix")"
            if [[ -z $comment ]]; then
              # If no help and type comment was added, then the metric is not known. Hence we do not add it
              # to the output.
              continue
            fi
            output+="$comment\n"
            prev_prefix="$prefix"
          fi
          output+="$line\n"
        done
        # Writing to the output prom file has to be done with an atomic operation. This is why we first write to a temporary file
        # and then we move/rename the temporary file to the actual output file.
        echo -e "$output" >> "$output_file.tmp" || { logger -p error -t  process_rsyslog_pstats.sh  "Error writing to temp output file"; exit 1; }
        mv "$output_file.tmp" "$output_file"
      else
        processed_line=$(process_line "$line") || { logger -p error -t  process_rsyslog_pstats.sh  "Error processing line: $line"; exit 1; }
        lines+=("$processed_line")
      fi
    done

  60-audit.conf: |
    template(name="SyslogForwarderTemplate" type="list") {
      constant(value=" ")
      constant(value="{{ required ".Values.rsyslogConfig.projectName is required" .Values.rsyslogConfig.projectName }}")
      constant(value=" ")
      constant(value="{{ required ".Values.rsyslogConfig.shootName is required" .Values.rsyslogConfig.shootName }}")
      constant(value=" ")
      constant(value="{{ required ".Values.rsyslogConfig.shootUID is required" .Values.rsyslogConfig.shootUID }}")
      constant(value=" ")
      property(name="hostname")
      constant(value=" ")
      property(name="pri")
      constant(value=" ")
      property(name="syslogtag")
      constant(value=" ")
      property(name="timestamp" dateFormat="rfc3339")
      constant(value=" ")
      property(name="procid")
      constant(value=" ")
      property(name="msgid")
      constant(value=" ")
      property(name="msg")
      constant(value=" ")
    }

    module(
      load="omrelp"
      {{- if .Values.rsyslogConfig.tls.tlsLib }}
      tls.tlslib="{{ .Values.rsyslogConfig.tls.tlsLib }}"
      {{- end }}
    )

    module(load="omprog")
    module(
      load="impstats"
      interval="60"
      format="json"
      resetCounters="off"
      ruleset="process_stats"
      bracketing="on"
    )

    ruleset(name="process_stats") {
      action(
        type="omprog"
        name="to_pstats_processor"
        binary="/var/lib/rsyslog-relp-configurator/process_rsyslog_pstats.sh -o {{ .Values.rsyslogConfig.metrics.textfileDir }}"
      )
    }

    ruleset(name="relp_action_ruleset") {
      action(
        name="rsyslog-relp"
        type="omrelp"
        target="{{ required ".Values.rsyslogConfig.target is required" .Values.rsyslogConfig.target }}"
        port="{{ required ".Values.rsyslogConfig.port is required" .Values.rsyslogConfig.port }}"
        Template="SyslogForwarderTemplate"
        {{- if .Values.rsyslogConfig.rebindInterval }}
        rebindInterval="{{ .Values.rsyslogConfig.rebindInterval }}"
        {{- end }}
        {{- if .Values.rsyslogConfig.timeout }}
        timeout="{{ .Values.rsyslogConfig.timeout }}"
        {{- end }}
        {{- if .Values.rsyslogConfig.resumeRetryCount }}
        action.resumeRetryCount="{{ .Values.rsyslogConfig.resumeRetryCount }}"
        {{- end }}
        {{- if .Values.rsyslogConfig.reportSuspensionContinuation }}
        action.reportSuspensionContinuation="{{ .Values.rsyslogConfig.reportSuspensionContinuation }}"
        {{- end }}
        {{- if .Values.rsyslogConfig.tls.enabled }}
        tls="on"
        tls.caCert="/var/lib/rsyslog-relp-configurator/tls/ca.crt"
        tls.myCert="/var/lib/rsyslog-relp-configurator/tls/tls.crt"
        tls.myPrivKey="/var/lib/rsyslog-relp-configurator/tls/tls.key"
        {{- end }}
        {{- if .Values.rsyslogConfig.tls.authMode }}
        tls.authmode="{{ .Values.rsyslogConfig.tls.authMode }}"
        {{- end }}
        {{- if .Values.rsyslogConfig.tls.permittedPeer }}
        tls.permittedpeer=[{{ .Values.rsyslogConfig.tls.permittedPeer }}]
        {{- end }}
      )
    }{{ printf "\n" }}

    {{- range .Values.rsyslogConfig.filters }}
    if {{ . }} then {
      call relp_action_ruleset
      stop
    }
    {{- end}}

    input(type="imuxsock" Socket="/run/systemd/journal/syslog")