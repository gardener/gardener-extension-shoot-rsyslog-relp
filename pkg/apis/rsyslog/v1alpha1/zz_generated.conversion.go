//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	unsafe "unsafe"

	rsyslog "github.com/gardener/gardener-extension-shoot-rsyslog-relp/pkg/apis/rsyslog"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*LoggingRule)(nil), (*rsyslog.LoggingRule)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_LoggingRule_To_rsyslog_LoggingRule(a.(*LoggingRule), b.(*rsyslog.LoggingRule), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*rsyslog.LoggingRule)(nil), (*LoggingRule)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_rsyslog_LoggingRule_To_v1alpha1_LoggingRule(a.(*rsyslog.LoggingRule), b.(*LoggingRule), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*RsyslogRelpConfig)(nil), (*rsyslog.RsyslogRelpConfig)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_RsyslogRelpConfig_To_rsyslog_RsyslogRelpConfig(a.(*RsyslogRelpConfig), b.(*rsyslog.RsyslogRelpConfig), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*rsyslog.RsyslogRelpConfig)(nil), (*RsyslogRelpConfig)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_rsyslog_RsyslogRelpConfig_To_v1alpha1_RsyslogRelpConfig(a.(*rsyslog.RsyslogRelpConfig), b.(*RsyslogRelpConfig), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*TLS)(nil), (*rsyslog.TLS)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_TLS_To_rsyslog_TLS(a.(*TLS), b.(*rsyslog.TLS), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*rsyslog.TLS)(nil), (*TLS)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_rsyslog_TLS_To_v1alpha1_TLS(a.(*rsyslog.TLS), b.(*TLS), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_LoggingRule_To_rsyslog_LoggingRule(in *LoggingRule, out *rsyslog.LoggingRule, s conversion.Scope) error {
	out.ProgramNames = *(*[]string)(unsafe.Pointer(&in.ProgramNames))
	out.Severity = in.Severity
	return nil
}

// Convert_v1alpha1_LoggingRule_To_rsyslog_LoggingRule is an autogenerated conversion function.
func Convert_v1alpha1_LoggingRule_To_rsyslog_LoggingRule(in *LoggingRule, out *rsyslog.LoggingRule, s conversion.Scope) error {
	return autoConvert_v1alpha1_LoggingRule_To_rsyslog_LoggingRule(in, out, s)
}

func autoConvert_rsyslog_LoggingRule_To_v1alpha1_LoggingRule(in *rsyslog.LoggingRule, out *LoggingRule, s conversion.Scope) error {
	out.ProgramNames = *(*[]string)(unsafe.Pointer(&in.ProgramNames))
	out.Severity = in.Severity
	return nil
}

// Convert_rsyslog_LoggingRule_To_v1alpha1_LoggingRule is an autogenerated conversion function.
func Convert_rsyslog_LoggingRule_To_v1alpha1_LoggingRule(in *rsyslog.LoggingRule, out *LoggingRule, s conversion.Scope) error {
	return autoConvert_rsyslog_LoggingRule_To_v1alpha1_LoggingRule(in, out, s)
}

func autoConvert_v1alpha1_RsyslogRelpConfig_To_rsyslog_RsyslogRelpConfig(in *RsyslogRelpConfig, out *rsyslog.RsyslogRelpConfig, s conversion.Scope) error {
	out.Target = in.Target
	out.Port = in.Port
	out.LoggingRules = *(*[]rsyslog.LoggingRule)(unsafe.Pointer(&in.LoggingRules))
	out.TLS = (*rsyslog.TLS)(unsafe.Pointer(in.TLS))
	out.RebindInterval = (*int)(unsafe.Pointer(in.RebindInterval))
	out.Timeout = (*int)(unsafe.Pointer(in.Timeout))
	out.ResumeRetryCount = (*int)(unsafe.Pointer(in.ResumeRetryCount))
	out.ReportSuspensionContinuation = (*bool)(unsafe.Pointer(in.ReportSuspensionContinuation))
	return nil
}

// Convert_v1alpha1_RsyslogRelpConfig_To_rsyslog_RsyslogRelpConfig is an autogenerated conversion function.
func Convert_v1alpha1_RsyslogRelpConfig_To_rsyslog_RsyslogRelpConfig(in *RsyslogRelpConfig, out *rsyslog.RsyslogRelpConfig, s conversion.Scope) error {
	return autoConvert_v1alpha1_RsyslogRelpConfig_To_rsyslog_RsyslogRelpConfig(in, out, s)
}

func autoConvert_rsyslog_RsyslogRelpConfig_To_v1alpha1_RsyslogRelpConfig(in *rsyslog.RsyslogRelpConfig, out *RsyslogRelpConfig, s conversion.Scope) error {
	out.Target = in.Target
	out.Port = in.Port
	out.TLS = (*TLS)(unsafe.Pointer(in.TLS))
	out.LoggingRules = *(*[]LoggingRule)(unsafe.Pointer(&in.LoggingRules))
	out.RebindInterval = (*int)(unsafe.Pointer(in.RebindInterval))
	out.Timeout = (*int)(unsafe.Pointer(in.Timeout))
	out.ResumeRetryCount = (*int)(unsafe.Pointer(in.ResumeRetryCount))
	out.ReportSuspensionContinuation = (*bool)(unsafe.Pointer(in.ReportSuspensionContinuation))
	return nil
}

// Convert_rsyslog_RsyslogRelpConfig_To_v1alpha1_RsyslogRelpConfig is an autogenerated conversion function.
func Convert_rsyslog_RsyslogRelpConfig_To_v1alpha1_RsyslogRelpConfig(in *rsyslog.RsyslogRelpConfig, out *RsyslogRelpConfig, s conversion.Scope) error {
	return autoConvert_rsyslog_RsyslogRelpConfig_To_v1alpha1_RsyslogRelpConfig(in, out, s)
}

func autoConvert_v1alpha1_TLS_To_rsyslog_TLS(in *TLS, out *rsyslog.TLS, s conversion.Scope) error {
	out.Enabled = in.Enabled
	out.SecretReferenceName = (*string)(unsafe.Pointer(in.SecretReferenceName))
	out.PermittedPeer = *(*[]string)(unsafe.Pointer(&in.PermittedPeer))
	out.AuthMode = (*rsyslog.AuthMode)(unsafe.Pointer(in.AuthMode))
	out.TLSLib = (*rsyslog.TLSLib)(unsafe.Pointer(in.TLSLib))
	return nil
}

// Convert_v1alpha1_TLS_To_rsyslog_TLS is an autogenerated conversion function.
func Convert_v1alpha1_TLS_To_rsyslog_TLS(in *TLS, out *rsyslog.TLS, s conversion.Scope) error {
	return autoConvert_v1alpha1_TLS_To_rsyslog_TLS(in, out, s)
}

func autoConvert_rsyslog_TLS_To_v1alpha1_TLS(in *rsyslog.TLS, out *TLS, s conversion.Scope) error {
	out.Enabled = in.Enabled
	out.SecretReferenceName = (*string)(unsafe.Pointer(in.SecretReferenceName))
	out.PermittedPeer = *(*[]string)(unsafe.Pointer(&in.PermittedPeer))
	out.AuthMode = (*AuthMode)(unsafe.Pointer(in.AuthMode))
	out.TLSLib = (*TLSLib)(unsafe.Pointer(in.TLSLib))
	return nil
}

// Convert_rsyslog_TLS_To_v1alpha1_TLS is an autogenerated conversion function.
func Convert_rsyslog_TLS_To_v1alpha1_TLS(in *rsyslog.TLS, out *TLS, s conversion.Scope) error {
	return autoConvert_rsyslog_TLS_To_v1alpha1_TLS(in, out, s)
}
